<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>StockVault v1.0</title>
  <link rel="stylesheet" href="ims_design.css" />
</head>
<body>
  <!-- Header section with the logo and control buttons (search and new entry) -->
  <header class="top-bar">
    <span class="logo">Inventory Management System</span>
    <div class="controls">
      <!-- Search bar to search inventory items by name -->
      <input type="text" placeholder="Find item..." class="search-bar" id="searchInput" />
      <button type="submit" name="searchbtn" class="btn search-btn">Search</button>
      <!-- Button to open the popup modal for adding a new inventory item -->
      <button type="button" id="openPopup" class="btn add-btn">+ New Entry</button>
    </div>
  </header>

  <div class="spacer"></div>

  <!-- Main inventory section -->
  <section class="inventory-section">
    <h2 class="section-title">Available Stock</h2>
    <div class="filter-area">
      <!-- Labels for the filter and sort options -->
      <div class="label-row">
        <label for="filter-name">Filter:</label>
        <label for="sort-date">Arrange:</label>
      </div>
      <div class="action-row">
        <!-- Filter button to sort by Name -->
        <button name="filter-name" class="btn filter-btn" id="filterByName">By Name</button>
        <!-- Sort button to arrange by Date (Newest First) -->
        <button name="sort-date" class="btn sort-btn" id="sortByDate">By Date (Newest)</button>
        <!-- Sort button to arrange by Price -->
        <button name="sort-price" class="btn sort-btn" id="sortByPrice">By Price</button>
      </div>
    </div>
    <div class="spacer-sm"></div>

    <!-- Table displaying inventory items -->
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th style="width:15%">Image</th>
            <th style="width:20%">Item Name</th>
            <th style="width:25%">Description</th>
            <th style="width:10%">Stock</th>
            <th style="width:10%">Unit Price</th>
            <th style="width:20%">Added On</th>
            <th style="width:15%">Options</th>
          </tr>
        </thead>
        <!-- Table body where inventory items will be dynamically added -->
        <tbody id="inventoryBody"></tbody>
      </table>
    </div>
  </section>

  <!-- Modal for adding or editing inventory items -->
  <div id="popupForm" class="modal">
    <div class="modal-content">
      <!-- Close button to close the modal -->
      <span class="close-btn" id="closePopup">&times;</span>
      <h3 id="formTitle">Add New Inventory Item</h3>
      <!-- Form for adding/editing an inventory item -->
      <form id="itemForm">
        <label for="itemName">Item Name</label>
        <input type="text" id="itemName" name="itemName" required>

        <label for="itemDesc">Description</label>
        <input type="text" id="itemDesc" name="itemDesc">

        <label for="itemQty">Quantity</label>
        <input type="number" id="itemQty" name="itemQty" required>

        <label for="itemPrice">Price</label>
        <input type="number" id="itemPrice" name="itemPrice" step="0.01" required>

        <label for="itemImage">Attach Image</label>
        <input type="file" id="itemImage" name="itemImage" accept="image/*">

        <!-- Submit button to add or update the inventory item -->
        <button type="submit" class="btn add-btn" id="formSubmitBtn">Add Item</button>
      </form>
    </div>
  </div>

  <script>
    // Get DOM elements for modal and form interaction
    const openBtn = document.getElementById('openPopup');
    const closeBtn = document.getElementById('closePopup');
    const modal = document.getElementById('popupForm');
    const itemForm = document.getElementById('itemForm');
    const inventoryBody = document.getElementById('inventoryBody');
    const formTitle = document.getElementById('formTitle');
    const formSubmitBtn = document.getElementById('formSubmitBtn');
    const itemImageInput = document.getElementById('itemImage');

    let editingRow = null; // Tracks the row being edited

    // Open the modal to add a new inventory item
    openBtn.onclick = () => {
      formTitle.textContent = 'Add New Inventory Item';
      formSubmitBtn.textContent = 'Add Item';
      itemForm.reset(); // Reset the form fields
      editingRow = null;
      modal.style.display = 'block'; // Show modal
    };

    // Close the modal when the close button is clicked
    closeBtn.onclick = () => modal.style.display = 'none';

    // Close the modal if clicked outside of the modal content
    window.onclick = (e) => {
      if (e.target === modal) modal.style.display = 'none';
    };

    // Handle form submission for adding or editing items
    itemForm.onsubmit = function (e) {
      e.preventDefault(); // Prevent default form submission behavior

      // Get form input values
      const name = document.getElementById('itemName').value.trim();
      const desc = document.getElementById('itemDesc').value.trim();
      const qty = parseInt(document.getElementById('itemQty').value.trim());
      const price = parseFloat(document.getElementById('itemPrice').value.trim()).toFixed(2);
      const date = new Date().toLocaleDateString();
      const timestamp = new Date().getTime();
      const imageFile = itemImageInput.files[0];

      // Validate form inputs
      if (qty <= 0) return alert("Quantity must be greater than 0.");
      if (price <= 0) return alert("Price must be greater than 0.");
      if (!imageFile && !editingRow) return alert("Please select an image to attach.");

      const reader = new FileReader();

      // Once the image is loaded, proceed with adding/editing the inventory item
      reader.onload = function (e) {
        const imageSrc = e.target.result;

        if (editingRow !== null) {
          // Update existing row if editing
          editingRow.cells[0].innerHTML = `<img src="${imageSrc}" alt="${name}" style="width: 50px; height: 50px;">`;
          editingRow.cells[1].textContent = name;
          editingRow.cells[2].textContent = desc;
          editingRow.cells[3].textContent = qty;
          editingRow.cells[4].textContent = `₱${price}`;
          editingRow.cells[5].textContent = date;
          editingRow.dataset.timestamp = timestamp;
          editingRow = null;
        } else {
          // Add new row if it's a new item
          const newRow = document.createElement('tr');
          newRow.dataset.name = name.toLowerCase();
          newRow.dataset.timestamp = timestamp;
          newRow.innerHTML = `
            <td><img src="${imageSrc}" alt="${name}" style="width: 50px; height: 50px;"></td>
            <td>${name}</td>
            <td>${desc}</td>
            <td>${qty}</td>
            <td>₱${price}</td>
            <td>${date}</td>
            <td>
              <button class="btn" style="background-color: #ffc107; color: white;" onclick="editItem(this)">Edit</button>
              <button class="btn" style="background-color: #dc3545; color: white;" onclick="deleteItem(this)">Delete</button>
            </td>
          `;
          inventoryBody.appendChild(newRow); // Append new row to the table
        }

        itemForm.reset(); // Reset the form after submission
        modal.style.display = 'none'; // Close the modal
        saveItems(); // Save the updated inventory to localStorage
      };

      // Read the image file or use the existing image when editing
      if (imageFile) {
        reader.readAsDataURL(imageFile);
      } else {
        const currentImg = editingRow?.cells[0].querySelector('img').src || '';
        reader.onload({ target: { result: currentImg } });
      }
    };

    // Function to edit an existing item
    function editItem(button) {
      const row = button.closest('tr');
      editingRow = row;
      formTitle.textContent = 'Edit Inventory Item';
      formSubmitBtn.textContent = 'Update Item';
      document.getElementById('itemName').value = row.cells[1].textContent;
      document.getElementById('itemDesc').value = row.cells[2].textContent;
      document.getElementById('itemQty').value = row.cells[3].textContent;
      document.getElementById('itemPrice').value = row.cells[4].textContent.replace('₱', '');
      modal.style.display = 'block'; // Show the modal for editing
    }

    // Function to delete an item after confirmation
    function deleteItem(button) {
      if (confirm("Are you sure you want to delete this item?")) {
        button.closest('tr').remove(); // Remove the row
        saveItems(); // Save the updated inventory after deletion
      }
    }

    // Function to save the current items to localStorage
    function saveItems() {
      const rows = document.querySelectorAll('#inventoryBody tr');
      const itemsData = Array.from(rows).map(row => ({
        name: row.cells[1].textContent,
        description: row.cells[2].textContent,
        quantity: row.cells[3].textContent,
        price: row.cells[4].textContent,
        date: row.cells[5].textContent,
        timestamp: row.dataset.timestamp,
        image: row.cells[0].querySelector('img').src
      }));
      localStorage.setItem('inventoryItems', JSON.stringify(itemsData)); // Save data in localStorage
    }

    // Function to load items from localStorage when the page loads
    function loadItems() {
      const itemsData = JSON.parse(localStorage.getItem('inventoryItems')) || [];
      itemsData.forEach(item => {
        const newRow = document.createElement('tr');
        newRow.dataset.name = item.name.toLowerCase();
        newRow.dataset.timestamp = item.timestamp;
        newRow.innerHTML = `
          <td><img src="${item.image}" alt="${item.name}" style="width: 50px; height: 50px;"></td>
          <td>${item.name}</td>
          <td>${item.description}</td>
          <td>${item.quantity}</td>
          <td>${item.price}</td>
          <td>${item.date}</td>
          <td>
            <button class="btn" style="background-color: #ffc107; color: white;" onclick="editItem(this)">Edit</button>
            <button class="btn" style="background-color: #dc3545; color: white;" onclick="deleteItem(this)">Delete</button>
          </td>
        `;
        inventoryBody.appendChild(newRow); // Append row to the inventory table
      });
    }

    // Live search functionality for filtering inventory items by name
    document.getElementById('searchInput').addEventListener('input', function () {
      const search = this.value.toLowerCase();
      document.querySelectorAll('#inventoryBody tr').forEach(row => {
        const name = row.cells[1].textContent.toLowerCase();
        row.style.display = name.includes(search) ? '' : 'none'; // Show or hide based on search
      });
    });

    // Sort items by name (A to Z)
    document.getElementById('filterByName').addEventListener('click', function () {
      const rows = Array.from(inventoryBody.querySelectorAll('tr'));
      rows.sort((a, b) => a.dataset.name.localeCompare(b.dataset.name));
      rows.forEach(row => inventoryBody.appendChild(row)); // Append sorted rows
    });

    // Sort items by date (Newest First)
    document.getElementById('sortByDate').addEventListener('click', function () {
      const rows = Array.from(inventoryBody.querySelectorAll('tr'));
      rows.sort((a, b) => b.dataset.timestamp - a.dataset.timestamp);
      rows.forEach(row => inventoryBody.appendChild(row)); // Append sorted rows
    });

    // Sort items by price (Lowest to Highest)
    document.getElementById('sortByPrice').addEventListener('click', function () {
      const rows = Array.from(inventoryBody.querySelectorAll('tr'));
      rows.sort((a, b) => {
        const priceA = parseFloat(a.cells[4].textContent.replace('₱', ''));
        const priceB = parseFloat(b.cells[4].textContent.replace('₱', ''));
        return priceA - priceB; // Sort based on price
      });
      rows.forEach(row => inventoryBody.appendChild(row)); // Append sorted rows
    });

    // Load inventory data when the page is fully loaded
    document.addEventListener('DOMContentLoaded', loadItems);
  </script>

</body>
</html>
